// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: course/course-srv/proto/course/course.proto

package course

import (
	dto "course/course-srv/proto/dto"
	basic "course/proto/basic"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CourseService service

func NewCourseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CourseService service

type CourseService interface {
	//Course
	CourseList(ctx context.Context, in *dto.CoursePageDto, opts ...client.CallOption) (*dto.CoursePageDto, error)
	SaveCourse(ctx context.Context, in *dto.CourseDto, opts ...client.CallOption) (*dto.CourseDto, error)
	DeleteCourse(ctx context.Context, in *basic.String, opts ...client.CallOption) (*basic.String, error)
	ListCourseCategory(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.CourseCategoryDtoList, error)
	SortCourse(ctx context.Context, in *dto.SortDto, opts ...client.CallOption) (*basic.String, error)
	FindCourseContent(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.CourseContentDto, error)
	SaveCourseContent(ctx context.Context, in *dto.CourseContentDto, opts ...client.CallOption) (*basic.String, error)
	//Category
	AllCategory(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.CategoryDtoList, error)
	SaveCategory(ctx context.Context, in *dto.CategoryDto, opts ...client.CallOption) (*dto.CategoryDto, error)
	DeleteCategory(ctx context.Context, in *basic.String, opts ...client.CallOption) (*basic.String, error)
}

type courseService struct {
	c    client.Client
	name string
}

func NewCourseService(name string, c client.Client) CourseService {
	return &courseService{
		c:    c,
		name: name,
	}
}

func (c *courseService) CourseList(ctx context.Context, in *dto.CoursePageDto, opts ...client.CallOption) (*dto.CoursePageDto, error) {
	req := c.c.NewRequest(c.name, "CourseService.CourseList", in)
	out := new(dto.CoursePageDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) SaveCourse(ctx context.Context, in *dto.CourseDto, opts ...client.CallOption) (*dto.CourseDto, error) {
	req := c.c.NewRequest(c.name, "CourseService.SaveCourse", in)
	out := new(dto.CourseDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) DeleteCourse(ctx context.Context, in *basic.String, opts ...client.CallOption) (*basic.String, error) {
	req := c.c.NewRequest(c.name, "CourseService.DeleteCourse", in)
	out := new(basic.String)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) ListCourseCategory(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.CourseCategoryDtoList, error) {
	req := c.c.NewRequest(c.name, "CourseService.ListCourseCategory", in)
	out := new(dto.CourseCategoryDtoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) SortCourse(ctx context.Context, in *dto.SortDto, opts ...client.CallOption) (*basic.String, error) {
	req := c.c.NewRequest(c.name, "CourseService.SortCourse", in)
	out := new(basic.String)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) FindCourseContent(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.CourseContentDto, error) {
	req := c.c.NewRequest(c.name, "CourseService.FindCourseContent", in)
	out := new(dto.CourseContentDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) SaveCourseContent(ctx context.Context, in *dto.CourseContentDto, opts ...client.CallOption) (*basic.String, error) {
	req := c.c.NewRequest(c.name, "CourseService.SaveCourseContent", in)
	out := new(basic.String)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) AllCategory(ctx context.Context, in *basic.String, opts ...client.CallOption) (*dto.CategoryDtoList, error) {
	req := c.c.NewRequest(c.name, "CourseService.AllCategory", in)
	out := new(dto.CategoryDtoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) SaveCategory(ctx context.Context, in *dto.CategoryDto, opts ...client.CallOption) (*dto.CategoryDto, error) {
	req := c.c.NewRequest(c.name, "CourseService.SaveCategory", in)
	out := new(dto.CategoryDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseService) DeleteCategory(ctx context.Context, in *basic.String, opts ...client.CallOption) (*basic.String, error) {
	req := c.c.NewRequest(c.name, "CourseService.DeleteCategory", in)
	out := new(basic.String)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CourseService service

type CourseServiceHandler interface {
	//Course
	CourseList(context.Context, *dto.CoursePageDto, *dto.CoursePageDto) error
	SaveCourse(context.Context, *dto.CourseDto, *dto.CourseDto) error
	DeleteCourse(context.Context, *basic.String, *basic.String) error
	ListCourseCategory(context.Context, *basic.String, *dto.CourseCategoryDtoList) error
	SortCourse(context.Context, *dto.SortDto, *basic.String) error
	FindCourseContent(context.Context, *basic.String, *dto.CourseContentDto) error
	SaveCourseContent(context.Context, *dto.CourseContentDto, *basic.String) error
	//Category
	AllCategory(context.Context, *basic.String, *dto.CategoryDtoList) error
	SaveCategory(context.Context, *dto.CategoryDto, *dto.CategoryDto) error
	DeleteCategory(context.Context, *basic.String, *basic.String) error
}

func RegisterCourseServiceHandler(s server.Server, hdlr CourseServiceHandler, opts ...server.HandlerOption) error {
	type courseService interface {
		CourseList(ctx context.Context, in *dto.CoursePageDto, out *dto.CoursePageDto) error
		SaveCourse(ctx context.Context, in *dto.CourseDto, out *dto.CourseDto) error
		DeleteCourse(ctx context.Context, in *basic.String, out *basic.String) error
		ListCourseCategory(ctx context.Context, in *basic.String, out *dto.CourseCategoryDtoList) error
		SortCourse(ctx context.Context, in *dto.SortDto, out *basic.String) error
		FindCourseContent(ctx context.Context, in *basic.String, out *dto.CourseContentDto) error
		SaveCourseContent(ctx context.Context, in *dto.CourseContentDto, out *basic.String) error
		AllCategory(ctx context.Context, in *basic.String, out *dto.CategoryDtoList) error
		SaveCategory(ctx context.Context, in *dto.CategoryDto, out *dto.CategoryDto) error
		DeleteCategory(ctx context.Context, in *basic.String, out *basic.String) error
	}
	type CourseService struct {
		courseService
	}
	h := &courseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CourseService{h}, opts...))
}

type courseServiceHandler struct {
	CourseServiceHandler
}

func (h *courseServiceHandler) CourseList(ctx context.Context, in *dto.CoursePageDto, out *dto.CoursePageDto) error {
	return h.CourseServiceHandler.CourseList(ctx, in, out)
}

func (h *courseServiceHandler) SaveCourse(ctx context.Context, in *dto.CourseDto, out *dto.CourseDto) error {
	return h.CourseServiceHandler.SaveCourse(ctx, in, out)
}

func (h *courseServiceHandler) DeleteCourse(ctx context.Context, in *basic.String, out *basic.String) error {
	return h.CourseServiceHandler.DeleteCourse(ctx, in, out)
}

func (h *courseServiceHandler) ListCourseCategory(ctx context.Context, in *basic.String, out *dto.CourseCategoryDtoList) error {
	return h.CourseServiceHandler.ListCourseCategory(ctx, in, out)
}

func (h *courseServiceHandler) SortCourse(ctx context.Context, in *dto.SortDto, out *basic.String) error {
	return h.CourseServiceHandler.SortCourse(ctx, in, out)
}

func (h *courseServiceHandler) FindCourseContent(ctx context.Context, in *basic.String, out *dto.CourseContentDto) error {
	return h.CourseServiceHandler.FindCourseContent(ctx, in, out)
}

func (h *courseServiceHandler) SaveCourseContent(ctx context.Context, in *dto.CourseContentDto, out *basic.String) error {
	return h.CourseServiceHandler.SaveCourseContent(ctx, in, out)
}

func (h *courseServiceHandler) AllCategory(ctx context.Context, in *basic.String, out *dto.CategoryDtoList) error {
	return h.CourseServiceHandler.AllCategory(ctx, in, out)
}

func (h *courseServiceHandler) SaveCategory(ctx context.Context, in *dto.CategoryDto, out *dto.CategoryDto) error {
	return h.CourseServiceHandler.SaveCategory(ctx, in, out)
}

func (h *courseServiceHandler) DeleteCategory(ctx context.Context, in *basic.String, out *basic.String) error {
	return h.CourseServiceHandler.DeleteCategory(ctx, in, out)
}
